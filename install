#!/usr/bin/env python3


def parse_args():
    import argparse

    pars = argparse.ArgumentParser(description="skel installer")
    mode = pars.add_mutually_exclusive_group()
    mode.add_argument("--symlink", action="store_true",
                      help="Instead of copying the files, symlink them")
    mode.add_argument("--hardlink", action="store_true",
                      help="Instead of copying the files, hardlink them")
    pars.add_argument("--to-etc-skel", action="store_true",
                      help="Instead of ~, install to /etc/skel")
    pars.add_argument("skeldir", nargs="+",
                      help="Source directory for installation")

    return pars.parse_args()

import os
import collections

args = parse_args()
if args.to_etc_skel:
    targetdir = "/etc/skel"
else:
    targetdir = os.environ["HOME"]

# lists of file actions to perform
mkdirlist = []
installlist = []
dupeinstalls = collections.defaultdict(lambda: list())

# scan skeldir, check for actions to perform (fill mkdirlist, installlist)
for skeldir in args.skeldir:
    if not os.path.isdir(skeldir):
        raise Exception("not a directory: " + skeldir)

        searchqueue = collections.deque([(skeldir, targetdir)])

        while searchqueue:
            srcdirname, targetdirname = dirstosearch.pop()
            for f in sorted(os.listdir(dirname)):
                srcfile = dirname + "/" + f
                tgtfile = targetdirname + "/" + f

                if os.path.islink(srcfile):
                    raise Exception("symlink: " + srcfile)

                if os.path.isdir(srcfile):
                    # it's a dir, so we need to create that if not exists
                    if os.path.exists(tgtfile):
                        if os.path.isdir(tgtfile):
                            # dir already exists, everything's fine
                            pass
                        else:
                            # there is a file with that name
                            raise Exception("Existing file " + tgtfile + " " +
                                            "prevents directory creation")
                    else:
                        # we need to create the dir
                        if tgtdir not in mkdirlist:
                            mkdirlist.append(tgtdir)
                else:
                    # it's a file, so we need to copy it
                    if os.path.exists(tgtfile):
                        if os.path.isdir(tgtfile):
                            raise Exception("Existing dir " + tgtfile + " " +
                                            "prevents file installation")
                        exists = True
                    else:
                        exists = False

                    installlist.append(srcfile, tgtfile, exists, skeldir)
                    dupeinstalls[tgtfile].append(srcfile)

# check whether multiple sources will be installed to one target location
error = False
for tgtfile, srcfiles in dupecps.items():
    if len(srcfiles) > 1:
        error = True
        print("multiple files would be installed to " + tgtfile + ":\n\t" +
              "\n\t".join(srcfiles))

if error:
    raise Exception("Duplicate installs; refusing to continue")
del dupecps

# ask for user confirmation
print("The following directories will be created:\n\t" +
      "\n\t".join(mkdirlist))
print("\nThe following files will be installed:\n")

maxtgtfilelen = max((len(tgtfile) for _, tgtfile, _, _ in installist))
maxskeldirlen = max((len(skeldir) for _, _, _, skeldir in installist))
for _, tgtfile, exists, skeldir in installlist:
    if exists:
        warning = "\x1b[31;1mExisting file will be overwritten!\x1b[m"
    else:
        warning = ""

    print(tgtfile.ljust(maxtgtfilelen) + " from " +
          skeldir.ljust(maxskeldirlen) + warning)

i = input("Continue [Y/n]? ")
if i not in {"Y", "y", "\n"}:
    raise Exception("Aborted by user")


# do installation
# create directories
for tgtfile in mkdirlist:
    print("mkdir " + tgtfile)
    os.mkdir(tgtfile)

# install files
for srcfile, tgtfile, exists, _ in installlist:
    if exists:
        print("rm " + tgtfile)
        os.unlink(tgtfile)

    if args.symlink:
        print("ln -s " + srcfile + " " + tgtfile)
        os.symlink(srcfile, tgtfile)
    elif args.hardlink:
        print("ln " + srcfile + " " + tgtfile)
        os.link(srcfile, tgtfile)
    else:
        print("cp " + srcfile + " " + tgtfile)
        open(tgtfile, "wb").write(open(srcfile, "rb").read())
