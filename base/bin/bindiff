#!/usr/bin/env python3
import math
import itertools
inf = float("+inf")


def roundtomultiple(number, multiple):
    return multiple * (1 + (number - 1) // multiple)


def finddiffplaces(files, chunksize=65536):
    """
    yields all positions where the files differ

    @param files
        list of File object (seek to desired pos)
    @param chunksize
        internal read() chunk size
    """
    pos = 0
    while len(files) > 1:
        chunks = [f.read(chunksize) for f in files]

        # remove EOF'd files
        files = [f for idx, f in enumerate(files) if len(chunks[idx]) == 0]

        # performance optimization: avoid comparing identical chunks in-depth.
        if len(set(chunks)) > 1:
            # iterate over all bytes of the chunk
            # the 'manual' loop is required because we don't want to increment
            # on exception.
            x = 0
            while x < chunksize:
                try:
                    # compare byte x of the chunk (byte pos + x of the files)
                    if len(set(c[x] for c in chunks)) > 1:
                        yield pos + x
                    x += 1
                except IndexError:
                    # we've reached the last byte of one of the files.
                    # remove the associated chunk.
                    chunks = [c for c in chunks if len(c) > x]

        pos += chunksize


def finddiffranges(files, rangetolerance=128):
    """
    yields ranges where binary files differ
    @param files
        list of File objects (seek to desired pos)
    @param rangetolerance
        if there are no errors for this many bytes, count the next as a new
        range.
    """
    firstplace = None
    lastplace = None

    for place in finddiffplaces(files):
        if firstplace is None:
            firstplace = lastplace = place
        elif place > lastplace + rangetolerance:
            yield firstplace, lastplace + 1
            firstplace = lastplace = place
        else:
            lastplace = place

    if firstplace is not None:
        yield firstplace, lastplace + 1


def getdifflines(files, diffranges, bytesperline, poscolwidth,
                 extensionsize=100):

    for start, end in diffranges:
        # yield a separator
        yield None

        extensionsize = roundtomultiple(extensionsize, bytesperline)
        extendedstart = max(start - extensionsize, 0)
        extendedlen = extensionsize + end - extendedstart
        extendedlen = roundtomultiple(extendedlen, bytesperline)
        extendedend = extendedstart + extendedlen

        chunks = []
        for f in files:
            f.seek(extendedstart)
            chunks.append(f.read(extendedlen))

        line = None
        byteofline = inf
        posinchunk = 0
        for x in range(max(len(c) for c in chunks)):
            if byteofline >= bytesperline:
                # start next line of output
                if line:
                    yield line
                byteofline = 0

                line = [hex(extendedstart + x)[2:].rjust(poscolwidth)]
                for f in files:
                    line.append("")
                    line.append("")

                byteofline = 0

            hexvals = []
            asciivals = []
            for c in chunks:
                v = c[x:x + 1]
                if not v:
                    hexvals.append("  ")
                    asciivals.append(" ")
                else:
                    v = v[0]
                    hexvals.append('{:02x}'.format(v))
                    if v >= 0x20 and v < 0x7f:
                        asciivals.append(chr(v))
                    else:
                        asciivals.append('\x1b[1m.\x1b[m')

            if len(set(hexvals) | {"  "}) > 2:
                # this byte differs between files; mark it with color.
                hexvals = ['\x1b[32m' + v + '\x1b[m' for v in hexvals]
                asciivals = ['\x1b[32m' + v + '\x1b[m' for v in asciivals]

            for i in range(len(files)):
                line[1 + 2 * i] += hexvals[i]
                line[2 + 2 * i] += asciivals[i]

            byteofline += 1

        if line and byteofline:
            if byteofline < bytesperline:
                for i in range(len(files)):
                    line[1 + 2 * i] += "  " * (bytesperline - byteofline)
                    line[2 + 2 * i] += " " * (bytesperline - byteofline)

            yield line


def printdiffrangetable(filenames, diffranges):
    files = [open(name, 'rb') for name in filenames]
    filesizes = [f.seek(0, 2) for f in files]
    for f in files:
        f.seek(0)

    # how wide must the first column be? (needs to fit the hex filesize)
    poscolwidth = max(4, 2 * (1 + int(math.log2(max(filesizes + [1]))) // 8))
    # how many bytes per line can we store in the file column?
    # minus 2 for the borders; the latter minus 2 for the column borders.
    # // 3 because for each byte, we need 3 chars (2 hex, 1 literal)
    bytesperline = ((ttywidth() - 2 - poscolwidth) // len(files) - 2) // 3
    if bytesperline <= 0:
        print("terminal not wide enough!")
        exit(1)
    # how wide will each file column be?
    filecolwidth = bytesperline * 3 + 1

    # print table header, with file names
    print("\u250c" + poscolwidth * "\u2500", end="")
    for f in filenames:
        print("\u252c" + filecolwidth * "\u2500", end="")
    print("\u2510\n\u2502" + "pos".center(poscolwidth), end="")
    for fn in filenames:
        if filecolwidth < len(fn):
            fn = fn[:filecolwidth]
        print("\u2502" + fn.center(filecolwidth), end="")
    print("\u2502\n", end="")

    # print all ranges
    firstrange = True
    for line in getdifflines(files, diffranges, bytesperline, poscolwidth):
        if line:
            # print the line
            print("\u2502".join([""] + line + [""]))
        else:
            # print a range separator
            print("\u251c" + "\u2500" * poscolwidth, end="")
            for f in files:
                print("\u253c" + "\u2500" * 2 * bytesperline, end="")
                if firstrange:
                    print("\u252c" + "\u2500" * bytesperline, end="")
                else:
                    print("\u253c" + "\u2500" * bytesperline, end="")
            print("\u2524\n", end="")
            firstrange = False

    # print table footer
    print("\u2514" + "\u2500" * poscolwidth, end="")
    for f in files:
        print("\u2534" + "\u2500" * 2 * bytesperline, end="")
        print("\u2534" + "\u2500" * bytesperline, end="")
    print("\u2518\n", end="")


def ttywidth(fd=1, default=120):
    import os
    import struct
    import fcntl
    import termios

    if os.isatty(fd):
        rqstruct = struct.pack('HHHH', 0, 0, 0, 0)
        resstruct = fcntl.ioctl(fd, termios.TIOCGWINSZ, rqstruct)
        _, w, _, _ = struct.unpack('HHHH', resstruct)
        return w
    else:
        return default


def merge(filenames, target, diffranges):
    files = [open(fn, 'rb') for fn in filenames]
    filesizes = [f.seek(0, 2) for f in files]
    pos = 0
    outfile = open(target, 'wb')

    def possiblefiles(size):
        return [i for i in range(len(files)) if filesizes[i] >= size]

    def writeslice(start, end, f=None):
        if f is None:
            f = possiblefiles(end)[0]

        size = end - start
        while size > 0:
            files[f].seek(start)
            data = files[f].read(min(size, 8*1024*1024))
            if not data:
                raise Exception("File too small")
            size -= len(data)
            outfile.write(data)

    for start, end in diffranges:
        size = end - start
        if pos < start:
            # there is an undisputed section in [pos:start]
            writeslice(pos, start)
            pos = start

        # ask user to make a choice
        sources = possiblefiles(end)
        print("disputed segment [0x%x:0x%x] (%d bytes). possible sources:"
              % (start, end, size))
        for i in sources:
            print("[%d] %s" % (i, filenames[i]))
        while True:
            inp = input("> ")
            try:
                inp = int(inp)
                if inp not in sources:
                    raise Exception("not a valid source")
                break
            except Exception as e:
                print(e.args[0])

        writeslice(start, end, inp)
        pos = end

    # finally, write the last, undisputed section
    writeslice(end, max(filesizes))


def main():
    import argparse
    p = argparse.ArgumentParser()
    p.add_argument('files', metavar='FILE', nargs='+',
                    help="files to compare")
    p.add_argument('--merge-to',
                    help="do an interactive merge, writing the result here.")

    args = p.parse_args()
    if len(args.files) < 1:
        print("you need to specify multiple files for comparision.")
        exit(1)

    diffranges = finddiffranges([open(name, 'rb') for name in args.files])
    # we don't want to do any lazy execution
    diffranges, backup = itertools.tee(diffranges)

    diffrangelist = []
    try:
        diffrangelist.append(next(backup))
    except StopIteration:
        print("files are identical")
        exit(0)

    # print the state
    printdiffrangetable(args.files, diffranges)

    if not args.merge_to:
        return

    # start the happy merging
    for rng in backup:
        diffrangelist.append(rng)

    merge(args.files, args.merge_to, diffrangelist)


if __name__ == "__main__":
    main()
